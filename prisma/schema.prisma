// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"

  // binaryTargets = ["native", "darwin", "linux-musl", "debian-openssl-1.1.x"]
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

enum Role {
  USER
  ADMIN
  ERRAND
  CLIENT
}

model User {
  id             String   @id @default(uuid())
  ///  @Validator.IsString()
  /// @Validator.MinLength(11)
  phone          String   @unique
  referralCode   String   @unique
  /// @Validator.IsEmail()
  email          String   @unique
  /// @Validator.MinLength(3)
  firstname      String
  /// @Validator.MinLength(3)
  lastname       String
  /// @Validator.MinLength(6)
  password       String
  role           String[]
  isAdmin        Boolean  @default(false)
  emailConfirmed Boolean  @default(false)
  phoneConfirmed Boolean  @default(false)
  updatedAt      DateTime @default(now())
  createdAt      DateTime @default(now())
  errand         Errand?
  client         Client?
}

model Location {
  id        String                               @id @default(uuid())
  // the geometry column itself
  coords    Unsupported("geometry(Point, 4326)")
  latitude  String
  longitude String
  address   String?
  errand    Errand?
  client    Client?
  createdAt DateTime                             @default(now())
  updatedAt DateTime                             @default(now())

  // the index for that column
  @@index([coords], name: "location_idx", type: Gist)
}

model Service {
  id            String         @id @default(uuid())
  errand        Errand         @relation(fields: [errandId], references: [id])
  errandId      String
  client        Client         @relation(fields: [clientId], references: [id])
  clientId      String
  startLocation Float
  endLocation   Float
  startTime     DateTime
  endTime       DateTime
  serviceReview ServiceReview?
}

enum RATING {
  ZERO
  ONE
  TWO
  THREE
  FOUR
  FIVE  @map("5")
}

model ServiceReview {
  id        String  @id @default(uuid())
  User      String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String  @unique
  comments  String
  Rating    RATING  @default(ZERO)
  Photos    String
}

model Errand {
  id          String    @id @default(uuid())
  name        String
  isAvailable Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  location    Location  @relation(fields: [locationId], references: [id])
  locationId  String    @unique
  categories  Service[]
}

model Client {
  id         String    @id @default(uuid())
  name       String
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  location   Location  @relation(fields: [locationId], references: [id])
  locationId String    @unique
  categories Service[]
}
