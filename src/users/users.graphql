scalar DateTime

type User {
  id: String
  firstname: String
  lastname: String
  email: String
  phone: String
  referralCode: String
}

enum QueryMode {
  Default
  Insensitive
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: String
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: String
}

enum SortOrder {
  Asc
  Desc
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTime
}

input UserWhereInput {
  id: StringFilter
  email: String
  phone: String
  firstname: String
  lastname: String
  from: StringNullableFilter
  to: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserOrderByInput {
  id: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  email: SortOrder
  phone: SortOrder
  from: SortOrder
  to: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CreateUserInput {
  email: String
  phone: String
  firstname: String
  lastname: String
  password: String
  referralCode: String
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type Query {
  users(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    skip: Float
    take: Float = 10
  ): [User!]!

  user(id: String!): User
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): User
}
